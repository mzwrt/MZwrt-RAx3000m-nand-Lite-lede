name: Build_mt7981_rax3000m

on: 
  repository_dispatch:
  workflow_dispatch:

# 定时触发编译
  schedule:
    - cron: 25 18 * * 6

# 点赞☆Star触发编译
#  watch:
#    types: [started]

jobs:
  Build_mt7981_rax3000m:
    runs-on: ubuntu-latest
    steps:
    - name: Clone Repository
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        docker rmi `docker images -q`
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt update
        sudo -E apt -y upgrade
        sudo -E apt -y full-upgrade
        sudo -E apt -y install re2c indent libattr1-dev libdebuginfod-dev libiptc-dev rpm gfortran diffstat ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev build-essential git wget curl unzip bzip2 xz-utils flex bison gawk libc6-dev libncurses5-dev libncursesw5-dev libssl-dev zlib1g-dev libtool python3 python3-pip python3-setuptools
        sudo -E apt -y autoremove --purge
        sudo -E systemctl daemon-reload
        sudo -E apt clean
        sudo -E timedatectl set-timezone "Asia/Shanghai"
        git config --global user.name 'GitHub Actions' && git config --global user.email 'waiquwang@gmail.com'
        df -h
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: openwrt-21.02
      run: |
        git clone $REPO_URL openwrt
        cd openwrt
        cp -f ../DIY/diy1.sh ./
        chmod +x ./diy1.sh && ./diy1.sh

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a

        ./scripts/feeds install -a

        cp -f ../DIY/diy2.sh ./        
        chmod +x ./diy2.sh && ./diy2.sh

        #cp -f ../DIY/diy3.sh ./        
        #chmod +x ./diy3.sh && ./diy3.sh 
        
    - name: Configuration Customization - Build_mt7981_rax3000m
      env:
        CONFIG_FILE: './config/rax3000m.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt && make oldconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        # make -j$(nproc) || make -j1 V=s

        mkdir -p ./bin/targets/mediatek/filogic/ && echo "测试" > ./bin/targets/mediatek/filogic/yourfile.txt
        mkdir -p ./bin/targets/mediatek/filogic/packages/ && echo "测试" > ./bin/targets/mediatek/filogic/packages/yourfile.txt
        echo "======================="
        pwd
        echo "======================="
        ls -R ./bin/targets/mediatek/filogic
        echo "======================="
        ls -R ./bin/targets/mediatek
        echo "======================="
        tree ./bin/targets/mediatek/
        


        
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        
    - name: Create versioned release directory
      working-directory: ./openwrt
      run: |
        # 创建版本目录（包括编译日期）
        RELEASE_NAME="MzWrt-CMCC-RAX3000M-$(date +'%Y%m%d')"
        mkdir -p ./artifact/$RELEASE_NAME
        # 打包 packages 文件夹
        tar -czf ./artifact/$RELEASE_NAME/packages.tar.gz -C ./bin/targets/mediatek/filogic/ packages
        # 删除 packages 文件夹
        rm -rf ./bin/targets/mediatek/filogic/packages
        # 将整个目录下的文件复制到版本目录中
        cp -r ./bin/targets/mediatek/filogic/* ./artifact/$RELEASE_NAME/

    - name: Create versioned release directory
      working-directory: ./openwrt
      run: |
        # 创建版本目录（包括编译日期）
        RELEASE_NAME="MzWrt-CMCC-RAX3000M-$(date +'%Y%m%d')"
        mkdir -p ./artifact/$RELEASE_NAME
        echo "======================="
        ls ./artifact
        echo "======================="
        pwd
        echo "======================="
        tree .
        echo "======================="
        # 打包 packages 文件夹
        tar -czf ./artifact/$RELEASE_NAME/packages.tar.gz -C ./bin/targets/mediatek/filogic/ packages
        # 删除 packages 文件夹
        rm -rf ./bin/targets/mediatek/filogic/packages
        # 将整个目录下的文件复制到版本目录中
        cp -r ./bin/targets/mediatek/filogic/* ./artifact/$RELEASE_NAME/
        echo "Created directory and files in ./artifact/$RELEASE_NAME"
        ls -R ./artifact/$RELEASE_NAME

    - name: Generate Tag & Release Name
      id: generate_name
      run: |
        time=$(date +%Y%m%d%H%M%S)
        release_tag="$time"
        release_name="MzWrt-CMCC-RAX3000M-$(date +%Y%m%d)"
        echo "RELEASE_TAG=$release_tag" >> $GITHUB_ENV  # 设置为环境变量
        echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV  # 设置为环境变量

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: "${{ env.RELEASE_TAG }}"  # 使用 generate_name 步骤生成的 release_tag
        release_name: "${{ env.RELEASE_NAME }}"  # 使用 generate_name 步骤生成的 release_name
        body: "This is the release of OpenWrt firmware for RAX3000M"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check generated files
      run: |
        echo "Listing files in ./artifact:"
        ls -R ./artifact/

    - name: Upload Firmware and Packages to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # 从 create-release 步骤获取 upload_url
        asset_path: ./artifact/${{ env.RELEASE_NAME }}/  # 使用生成的 RELEASE_NAME 变量
        asset_name: ${{ env.RELEASE_NAME }}  # 使用生成的 RELEASE_NAME 变量
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
